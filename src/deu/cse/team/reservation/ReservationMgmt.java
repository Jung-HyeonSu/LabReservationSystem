/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package deu.cse.team.reservation;

import deu.cse.team.classadmin.ClassAdmin;
import deu.cse.team.decorator.HalfTime;
import deu.cse.team.decorator.OneHourTime;
import deu.cse.team.decorator.QuarterTime;
import deu.cse.team.decorator.SeatNumber;
import deu.cse.team.decorator.Time;
import deu.cse.team.message.SendMessage;
import deu.cse.team.singleton.AccountDTO;
import deu.cse.team.singleton.DAO;
import deu.cse.team.singleton.ReservationDTO;
import deu.cse.team.strategy.AllowedStudent;
import deu.cse.team.strategy.Class911;
import deu.cse.team.strategy.Class915;
import deu.cse.team.strategy.Class916;
import deu.cse.team.strategy.Class918;
import deu.cse.team.strategy.LectureRoom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class ReservationMgmt extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    String id;
    String reser_number;
    int totalTime = 0;
    String classnumber;
    String reser_date;
    String reser_endtime;
    String seat_number;
    Calendar c = Calendar.getInstance();
    String today = Integer.toString(c.get(Calendar.YEAR)) + "/" + Integer.toString(c.get(Calendar.MONTH) + 1) + "/" + Integer.toString(c.get(Calendar.DATE));

    public ReservationMgmt() {
        initComponents();
    }

    public ReservationMgmt(String id) {
        this.id = id;
        initComponents();
        loadReserTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel2.setText("예약취소");

        jLabel3.setText("정말로 예약을 취소하시겠습니까?");

        jButton2.setText("예");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("아니오");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDialog1Layout.createSequentialGroup()
                            .addGap(77, 77, 77)
                            .addComponent(jLabel3))
                        .addGroup(jDialog1Layout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(jLabel2))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("맑은 고딕", 1, 14)); // NOI18N
        jLabel5.setText("예약 연장");

        jButton5.setText("연장");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"15분"},
                {"30분"},
                {"1시간"}
            },
            new String [] {
                "추가 시간 선택"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "연장 시간"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton6.setText(">");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("<");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("취소");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel6.setText("총 연장 시간:");

        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("0시간 00분");

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDialog2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton6)
                                    .addComponent(jButton7)))
                            .addGroup(jDialog2Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jLabel5)))
                        .addGap(1, 1, 1)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton8)))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton8))
                .addGap(17, 17, 17))
        );

        setPreferredSize(new java.awt.Dimension(818, 477));

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        jLabel1.setText("예약확인");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "예약번호", "날짜", "좌석번호", "강의실", "시작시간", "종료시간", "승인"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("예약 취소");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("※연장 또는삭제 시, 원하는 예약을 클릭 후 버튼 클릭");

        jButton4.setText("시간 연장");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(55, 55, 55)
                .addComponent(jButton1)
                .addGap(294, 294, 294))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(356, 356, 356)
                        .addComponent(jLabel1)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        reser_number = model.getValueAt(row, 0).toString();

        jDialog1.setVisible(true);
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setSize(350, 250);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        reser_number = model.getValueAt(row, 0).toString();
        classnumber = model.getValueAt(row, 3).toString();
        reser_date = model.getValueAt(row, 1).toString();
        reser_endtime = model.getValueAt(row, 5).toString();
        seat_number = model.getValueAt(row, 2).toString();

        jDialog2.setVisible(true);
        jDialog2.setLocationRelativeTo(this);
        jDialog2.setSize(320, 330);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DAO dao = DAO.getInstance();
        List<ReservationDTO> reservationList = dao.getReserList();
        for (int i = 0; i < reservationList.size(); i++) {
            if (reser_number.equals(Integer.toString(reservationList.get(i).getReser_number()))) {
                ReservationDTO dto = new ReservationDTO();
                ClassAdmin classadmin = new ClassAdmin();
                classadmin.classAdminSet(reservationList.get(i).getOk(), reservationList.get(i).getClassadmin(), reservationList.get(i).getClassnumber(), Integer.toString(reservationList.get(i).getReser_number()), reservationList.get(i).getReser_date(), reservationList.get(i).getReser_endtime(), reservationList.get(i).getId());

                dao.UpdateCancelReser(dto, reser_number);
            }
        }
        loadReserTable();

        showMessageDialog(null, "취소되었습니다.");
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jDialog1.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Calendar cal = Calendar.getInstance();
        Date endtime1;
        Date endtime2;
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        DAO dao = DAO.getInstance();

        Time time = null;

        String resultTime = null;
        String oldAdminReserNum = null;

        boolean addX = false;
        boolean addO = false;
        boolean okX = false;
        boolean okO = false;
        boolean adminAsis = false;
        boolean adminX = false;
        boolean adminMe = false;

        for (int j = 0; j < jTable4.getRowCount(); j++) {
            time = new SeatNumber(reser_number);
            if ("15분".equals(String.valueOf(jTable4.getValueAt(j, 0)))) {
                time = new QuarterTime(time);
            }
            if ("30분".equals(String.valueOf(jTable4.getValueAt(j, 0)))) {
                time = new HalfTime(time);
            }
            if ("1시간".equals(String.valueOf(jTable4.getValueAt(j, 0)))) {
                time = new OneHourTime(time);
            }
        }

        // 테이블에서 가져온 끝시간 date 자료형으로 변환
        try {
            endtime1 = formatter.parse(formatter.format(cal.getTime())); //처음 예약된 값
            cal.setTime(formatter.parse(reser_endtime));            
            cal.add(Calendar.MINUTE, time.time());
            endtime2 = formatter.parse(formatter.format(cal.getTime()));
            List<ReservationDTO> reservationList = dao.getreservationcanadd(classnumber, today, "14:00",seat_number);
            System.out.println("addtime = "+formatter.format(cal.getTime()));
            System.out.println(reservationList.size());
            if (reservationList.size() != 1 ) { //연장 불가능
                showMessageDialog(null, "       ※연장실패※\n다른 사용자와 예약 시간이 중복됩니다.");
            } else {
                //1. 연장시간이 17시 이전
                if ((cal.getTime()).before(formatter.parse("17:00")) || (cal.getTime()).equals(formatter.parse("17:00"))) {
                    showMessageDialog(null, " 17시이전이라 바로 연장가능 ");
                }
                
                //2. 연장시간이 17시 초과
                else{
                    //만약 원래 시간이 17시 이전이면
                    if (endtime1.before(formatter.parse("17:00")) || endtime1.equals(formatter.parse("17:00"))) { 
                        showMessageDialog(null, " 17시이후 새로운 예약이라 허락연장으로 이동 ");
//                        ok=0
//                        
                    }
                    //원래부터 17시 이후
                    else{
                        showMessageDialog(null, " 관리자 권환 확인 필요 ");
                    }
                }
                    
                

            }

        } catch (ParseException ex) {
            Logger.getLogger(ReservationMgmt.class.getName()).log(Level.SEVERE, null, ex);
        }

//        try {
//            //날짜,강의실,시작시간,좌석     
//
//            cal.setTime(formatter.parse(reser_endtime));
//            cal.add(Calendar.MINUTE, time.time());
//            resultTime = formatter.format(cal.getTime());
//            //강의실번호 종료시간 시작시간 좌석번호
//            endtime2 = formatter.parse(formatter.format(cal.getTime()));
//            if ((cal.getTime()).before(formatter.parse("17:00")) || (cal.getTime()).equals(formatter.parse("17:00"))) { // 테이블에서 가져온 끝시간이 17시와 같거나 17시 이전일 경우
//                for (int i = 0; i < reservationList.size(); i++) {
//                    System.out.println("i = " + i);
//                    System.out.println("O = " + okO);
//                    System.out.println("okO = " + okO);
//                    System.out.println("adminAsis = " + adminAsis);
//                    if (Integer.toString(reservationList.get(i).getReser_number()) != reser_number) { //자신의 예약 제외
//                        if ((reservationList.get(i).getReser_date()).equals(reser_date) && (reservationList.get(i).getClassnumber()).equals(classnumber)) {// 예약 날짜와 강의실번호가 같은 경우
//
//                            // 1. 같은 좌석일 경우
//                            // 2. 다른 좌석일 경우
//                            if (Integer.toString(reservationList.get(i).getSeat_number()) == seat_number) { // 1. 같은 좌석일 경우
//                                if (endtime2.after(formatter.parse(reservationList.get(i).getReser_starttime()))) { // 1-1. 예약 연장 후 끝시간이 같은 좌석에 있는 예약의 시작시간 이후에 있는 경우
//                                    addX = true;
//                                    //연장 안됨
//                                } else if (endtime2.before(formatter.parse(reservationList.get(i).getReser_starttime())) || endtime2.equals(formatter.parse(reservationList.get(i).getReser_starttime()))) { //1-2 예약 연장 후 끝시간이 같은 좌석에 있는 예약의 시작시간 이전에 있는 경우, 같은 경우
//                                    // 연장 됨
//                                    addO = true;
//                                    if (endtime2.after(formatter.parse("17:00"))) {
//                                        // 승인을 다시 해야함, 관리권한자: '-', 예약시간 변경x
//                                        okX = true;
//                                        adminX = true;
//                                    } else {
//                                        // 관리 권한자: 조교, 예약 시간 변경
//                                        okO = true;
//                                        adminAsis = true;
//                                    }
//                                }
//                            } else { // 2.다른 좌석일 경우
////                                addO = true;가 없어서 8로 빠지는듯?
//                                if (endtime2.after(formatter.parse("17:00"))) {
//                                    // 승인을 다시 해야함, 관리권한자: '-', 예약시간 변경x
//                                    okX = true;
//                                    adminX = true;
//                                } else {
//                                    // 관리 권한자: 조교, 예약 시간 변경
//                                    okO = true;
//                                    adminAsis = true;
//                                }
//                            }
//                        }
//                    }
//                }
//            } else if ((cal.getTime()).after(formatter.parse("17:00"))) { //테이블에서 가져온 끝시간이 17시 이후일 경우
//                for (int i = 0; i < reservationList.size(); i++) {
//                    if (Integer.toString(reservationList.get(i).getReser_number()) != reser_number) { //자신의 예약 제외
//                        if ((reservationList.get(i).getReser_date()).equals(reser_date) && (reservationList.get(i).getClassnumber()).equals(classnumber)) {// 예약 날짜와 강의실번호가 같은 경우
//                            if (Integer.toString(reservationList.get(i).getSeat_number()) == seat_number) { // 1. 같은 좌석일 경우
//                                if (endtime2.after(formatter.parse(reservationList.get(i).getReser_starttime()))) { // 1-1. 예약 연장 후 끝시간이 같은 좌석에 있는 예약의 시작시간 이후에 있는 경우
//                                    //연장 안됨
//                                    addX = true;
//                                } else if (endtime2.before(formatter.parse(reservationList.get(i).getReser_starttime())) || endtime2.equals(formatter.parse(reservationList.get(i).getReser_starttime()))) {
//                                    //관리권한자: '-', 예약 시간 변경
//                                    addO = true;
//                                    adminX = true;
//                                }
//
//                            } else { // 2.다른 좌석일 경우
//                                if (endtime2.after(formatter.parse(reservationList.get(i).getReser_endtime()))) { // 2-1. 예약 연장 후 시간이 DB에 있는 모든 endtime보다 클 경우
//                                    // 연장됨, 관리 권한자 O
//                                    // 기존 관리권한자는  '-'
//                                    addO = true;
//                                    adminMe = true;
//                                    oldAdminReserNum = Integer.toString(reservationList.get(i).getReser_number());
//                                } else if (endtime2.before(formatter.parse(reservationList.get(i).getReser_endtime())) || endtime2.equals(formatter.parse(reservationList.get(i).getReser_endtime()))) {
//                                    // 연장됨, 관리권한자는 '-'
//                                    addO = true;
//                                    adminX = true;
//                                }
//                            }
//                        }
//                    }
//                }
//            }
//        } catch (ParseException ex) {
//            Logger.getLogger(ReservationMgmt.class.getName()).log(Level.SEVERE, null, ex);
//        }
//
//        ReservationDTO dto = new ReservationDTO();
//        String str = null;
//        if (classnumber.equals("915")) {
//            //send.send(phonenumber);
//            LectureRoom class915 = new Class915();
//            class915.setAllowedBehavior(new AllowedStudent());
//            str = class915.display();
//        } else if (classnumber.equals("916")) {
//            //send.send(phonenumber);
//            LectureRoom class916 = new Class916();
//            class916.setAllowedBehavior(new AllowedStudent());
//            str = class916.display();
//        } else if (classnumber.equals("918")) {
//            //send.send(phonenumber);
//            LectureRoom class918 = new Class918();
//            class918.setAllowedBehavior(new AllowedStudent());
//            str = class918.display();
//        } else if (classnumber.equals("911")) {
//            //send.send(phonenumber);
//            LectureRoom class911 = new Class911();
//            class911.setAllowedBehavior(new AllowedStudent());
//            str = class911.display();
//        }
//
//        if (addX == true) { //연장 안됨
//            showMessageDialog(null, "       ※연장실패※\n다른 사용자와 예약 시간이 중복됩니다.");
//        } else if (addO == true) {
//            showMessageDialog(null, "※       연장성공※\n예약이 " + jLabel7.getText() + " 연장됩니다.");
//            dao.UpdateReser(dto, reser_number, resultTime);
//            if (adminX == true) {
//                if (okO == true) {
//                    System.out.println("22222222");
//                    dao.UpdateReser(dto, reser_number, "-", "1");
//                } else if (okX == true) {
//                    System.out.println("333333333");
//                    dao.UpdateReser(dto, reser_number, "-", "0");
//                    showMessageDialog(null, "※예약이 17시를 넘어 예약 재승인이 필요합니다.");
//                }
//            }
//            if (adminMe == true) {
//
//                showMessageDialog(null, "※당신은 [" + classnumber + "]강의실의 관리권한자 입니다");
//                if (okO == true) {
//                    System.out.println("444444444");
//                    dao.UpdateReser(dto, reser_number, str, "1");
//                    dao.UpdateReser(dto, oldAdminReserNum, "-", "1");
//
//                } else if (okX == true) {
//                    System.out.println("5555555555");
//                    dao.UpdateReser(dto, reser_number, str, "0");
//                    dao.UpdateReser(dto, oldAdminReserNum, "-", "1");
//                }
//
//            }
//            if (adminAsis == true) {
//                if (okO == true) {
//                    System.out.println("66666666");
//                    dao.UpdateReser(dto, reser_number, "조교", "1");
//                } else if (okX == true) {
//                    System.out.println("777777777777");
//                    dao.UpdateReser(dto, reser_number, "조교", "0");
//                }
//            }
//        } // 디비에 값없을 때 추가
//        reser_endtime = resultTime;
//        loadReserTable();
//        System.out.println("88888");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int row = jTable2.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.addRow(new Object[]{
            String.valueOf(jTable2.getValueAt(row, 0))
        });

        if ("15분".equals(jTable2.getValueAt(row, 0))) {
            totalTime += 15;
        } else if ("30분".equals(jTable2.getValueAt(row, 0))) {
            totalTime += 30;
        } else if ("1시간".equals(jTable2.getValueAt(row, 0))) {
            totalTime += 60;
        }
        int hour = totalTime / 60;
        int min = totalTime % 60;
        String str = Integer.toString(hour) + "시간 " + Integer.toString(min) + "분";
        jLabel7.setText(str);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int row = jTable4.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();

        if ("15분".equals(jTable4.getValueAt(row, 0))) {
            totalTime -= 15;
        } else if ("30분".equals(jTable4.getValueAt(row, 0))) {
            totalTime -= 30;
        } else if ("1시간".equals(jTable4.getValueAt(row, 0))) {
            totalTime -= 60;
        }
        int hour = totalTime / 60;
        int min = totalTime % 60;

        String str = Integer.toString(hour) + "시간 " + Integer.toString(min) + "분";
        jLabel7.setText(str);
        model.removeRow(row);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        jDialog2.dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    void loadReserTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setNumRows(0);
        DAO dao = DAO.getInstance();
        List<ReservationDTO> reservationList = dao.getReserList();
        String state;
        for (int i = 0; i < reservationList.size(); i++) {
            if (id.equals(reservationList.get(i).getId())) {
                if ("0".equals(reservationList.get(i).getOk())) {
                    state = "승인대기";
                } else if ("1".equals(reservationList.get(i).getOk())) {
                    state = "승인";
                } else {
                    state = "취소";
                }
                model.addRow(new Object[]{
                    reservationList.get(i).getReser_number(), reservationList.get(i).getReser_date(), reservationList.get(i).getSeat_number(),
                    reservationList.get(i).getClassnumber(), reservationList.get(i).getReser_starttime(), reservationList.get(i).getReser_endtime(), state});
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
}
