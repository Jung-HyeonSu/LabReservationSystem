/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package deu.cse.team.reservation;

import deu.cse.team.classadmin.ClassAdmin;
import deu.cse.team.decorator.HalfTime;
import deu.cse.team.decorator.OneHourTime;
import deu.cse.team.decorator.QuarterTime;
import deu.cse.team.decorator.SeatNumber;
import deu.cse.team.decorator.Time;
import deu.cse.team.message.SendMessage;
import deu.cse.team.singleton.AccountDTO;
import deu.cse.team.singleton.DAO;
import deu.cse.team.singleton.ReservationDTO;
import deu.cse.team.strategy.AllowedStudent;
import deu.cse.team.strategy.Class911;
import deu.cse.team.strategy.Class915;
import deu.cse.team.strategy.Class916;
import deu.cse.team.strategy.Class918;
import deu.cse.team.strategy.LectureRoom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author PC
 */
public class ReservationMgmt extends javax.swing.JPanel {

    /**
     * Creates new form NewJPanel
     */
    String id;
    String reser_number;
    int totalTime = 0;
    String classnumber;
    String reser_date;
    String reser_endtime;
    
    public ReservationMgmt() {
        initComponents();
    }

    public ReservationMgmt(String id) {
        this.id = id;
        initComponents();
        loadReserTable();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jDialog2 = new javax.swing.JDialog();
        jLabel5 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jButton4 = new javax.swing.JButton();

        jLabel2.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel2.setText("예약취소");

        jLabel3.setText("정말로 예약을 취소하시겠습니까?");

        jButton2.setText("예");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("아니오");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jDialog1Layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jDialog1Layout.createSequentialGroup()
                            .addGap(77, 77, 77)
                            .addComponent(jLabel3))
                        .addGroup(jDialog1Layout.createSequentialGroup()
                            .addGap(132, 132, 132)
                            .addComponent(jLabel2))))
                .addContainerGap(88, Short.MAX_VALUE))
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog1Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel2)
                .addGap(27, 27, 27)
                .addComponent(jLabel3)
                .addGap(45, 45, 45)
                .addGroup(jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addContainerGap(45, Short.MAX_VALUE))
        );

        jLabel5.setFont(new java.awt.Font("맑은 고딕", 1, 14)); // NOI18N
        jLabel5.setText("예약 연장");

        jButton5.setText("연장");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"15분"},
                {"30분"},
                {"1시간"}
            },
            new String [] {
                "추가 시간 선택"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(53, 53, 53))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(93, 93, 93))
        );

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "연장 시간"
            }
        ));
        jScrollPane4.setViewportView(jTable4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton6.setText(">");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("<");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setText("취소");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel6.setText("총 연장 시간:");

        jLabel7.setForeground(new java.awt.Color(0, 0, 255));
        jLabel7.setText("0시간 00분");

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jDialog2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton6)
                                    .addComponent(jButton7)))
                            .addGroup(jDialog2Layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(jLabel5)))
                        .addGap(1, 1, 1)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(26, 26, 26)
                        .addComponent(jButton8)))
                .addContainerGap(21, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jDialog2Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38))
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel5)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(72, 72, 72)
                        .addComponent(jButton6)
                        .addGap(18, 18, 18)
                        .addComponent(jButton7)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton5)
                    .addComponent(jButton8))
                .addGap(17, 17, 17))
        );

        setPreferredSize(new java.awt.Dimension(818, 477));

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 24)); // NOI18N
        jLabel1.setText("예약확인");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "예약번호", "날짜", "좌석번호", "강의실", "시작시간", "종료시간"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setFocusable(false);
        jScrollPane1.setViewportView(jTable1);

        jButton1.setText("예약 취소");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel4.setText("※연장 또는삭제 시, 원하는 예약을 클릭 후 버튼 클릭");

        jButton4.setText("시간 연장");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addGap(55, 55, 55)
                .addComponent(jButton1)
                .addGap(294, 294, 294))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 766, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(356, 356, 356)
                        .addComponent(jLabel1)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 323, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton4))
                .addGap(24, 24, 24))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        reser_number = model.getValueAt(row, 0).toString();

        jDialog1.setVisible(true);
        jDialog1.setLocationRelativeTo(this);
        jDialog1.setSize(350, 250);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        reser_number = model.getValueAt(row, 0).toString();
        classnumber = model.getValueAt(row, 3).toString();
        reser_date = model.getValueAt(row, 1).toString();
        reser_endtime = model.getValueAt(row, 5).toString();

        jDialog2.setVisible(true);
        jDialog2.setLocationRelativeTo(this);
        jDialog2.setSize(320, 330);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        DAO dao = DAO.getInstance();
        List<ReservationDTO> reservationList = dao.getReserList();
        for (int i = 0; i < reservationList.size(); i++) {
            if (reser_number.equals(Integer.toString(reservationList.get(i).getReser_number()))) {
                ReservationDTO dto = new ReservationDTO();
                ClassAdmin classadmin = new ClassAdmin();
                classadmin.classAdminSet(reservationList.get(i).getOk(), reservationList.get(i).getClassadmin(), reservationList.get(i).getClassnumber(), Integer.toString(reservationList.get(i).getReser_number()), reservationList.get(i).getReser_date(), reservationList.get(i).getReser_endtime(), reservationList.get(i).getId());

                dao.CancelReser(dto, reser_number);
            }
        }
        loadReserTable();

        showMessageDialog(null, "취소되었습니다.");
        jDialog1.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        jDialog1.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        boolean isChecked = false;
        boolean adminChecked = false;
        Date starttime1;
        Date starttime2;
        Date endtime1;
        Date endtime2;
        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        DAO dao = DAO.getInstance();
        List<ReservationDTO> reservationList = dao.getReserList();
        Time time = null;
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();

        for (int i = 0; i < reservationList.size(); i++) {

            if (reser_number.equals(Integer.toString(reservationList.get(i).getReser_number()))) {
                time = new SeatNumber(reser_number);
                for (int j = 0; j < jTable4.getRowCount(); j++) {
                    if ("15분".equals(String.valueOf(jTable4.getValueAt(j, 0)))) {
                        time = new QuarterTime(time);
                    }
                    if ("30분".equals(String.valueOf(jTable4.getValueAt(j, 0)))) {
                        time = new HalfTime(time);
                    }
                    if ("1시간".equals(String.valueOf(jTable4.getValueAt(j, 0)))) {
                        time = new OneHourTime(time);
                    }
                }

                for (int j = 0; j < reservationList.size(); j++) {
                    if ((reservationList.get(i).getSeat_number() == reservationList.get(j).getSeat_number()) && (reservationList.get(i).getReser_number() != reservationList.get(j).getReser_number())) {
                        if ((reservationList.get(i).getReser_date()).equals(reservationList.get(j).getReser_date()) && (reservationList.get(i).getClassnumber()).equals(reservationList.get(j).getClassnumber())) {

                            try {
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(formatter.parse(reservationList.get(i).getReser_endtime()));
                                cal.add(Calendar.MINUTE, time.time());

                                starttime1 = formatter.parse(reservationList.get(i).getReser_starttime());
                                starttime2 = formatter.parse(reservationList.get(j).getReser_starttime());
                                endtime1 = formatter.parse(formatter.format(cal.getTime()));
                                endtime2 = formatter.parse(reservationList.get(j).getReser_endtime());
                                if (starttime1.equals(starttime2) || endtime1.equals(endtime2)) {
                                    isChecked = true;
                                } else if (starttime1.before(starttime2) && endtime1.after(starttime2)) {
                                    isChecked = true;
                                } else if (starttime1.before(starttime2) && endtime1.after(endtime2)) {
                                    isChecked = true;
                                }
                            } catch (ParseException ex) {
                                Logger.getLogger(ReservationMgmt.class.getName()).log(Level.SEVERE, null, ex);

                            }
                        }
                    } else if ((reservationList.get(i).getSeat_number() != reservationList.get(j).getSeat_number()) && (reservationList.get(i).getReser_number() != reservationList.get(j).getReser_number())) {
                        if ((reservationList.get(i).getReser_date()).equals(reservationList.get(j).getReser_date()) && (reservationList.get(i).getClassnumber()).equals(reservationList.get(j).getClassnumber())) {
                            try {
                                Calendar cal = Calendar.getInstance();
                                cal.setTime(formatter.parse(reservationList.get(i).getReser_endtime()));
                                cal.add(Calendar.MINUTE, time.time());

                                endtime1 = formatter.parse(formatter.format(cal.getTime()));
                                endtime2 = formatter.parse(reservationList.get(j).getReser_endtime());
                                if (endtime1.after(endtime2) || endtime1.equals(endtime2)) {
                                    adminChecked = true;
                                }
                            } catch (ParseException ex) {
                                Logger.getLogger(ReservationMgmt.class.getName()).log(Level.SEVERE, null, ex);

                            }
                        }
                    }

                }

                System.out.println(time.getDescription() + time.time());
                Calendar cal = Calendar.getInstance();
                if (adminChecked == true) {
                    ReservationDTO dto = new ReservationDTO();
                    List<ReservationDTO> reserlist = dao.getReserList();
                    List<AccountDTO> accountlist = dao.getAccountList();
                    int maxReserNum = -1;

                    SendMessage send = new SendMessage();
                    String phonenumber = "01066885399";

                    SimpleDateFormat formatterr = new SimpleDateFormat("HH:mm");
                    String max = "16:00"; // 최장시간을 구하기 위함

                    String admin = "-";
                    int count = 0; //삭제 후 리스트에 값이 0개일 경우를 계산하기 위함
                    boolean check = false; // 리스트에 값이 없는지 확인

                    int str = 0;
                    try {
                        cal.setTime(formatter.parse(reservationList.get(i).getReser_endtime()));
                        cal.add(Calendar.MINUTE, time.time());
                        str = time.time();

                    } catch (ParseException ex) {
                        Logger.getLogger(ReservationMgmt.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    for (int j = 0; j < reserlist.size(); j++) {
                        if (classnumber.equals(reserlist.get(j).getClassnumber()) && (reserlist.get(j).getClassadmin()).equals(classnumber + "관리권한") && !(reser_number.equals(reserlist.get(j).getReser_number()))) { //같은 강의실, 관리권한자인 경우만 비교
                            if ((reserlist.get(j).getReser_date()).equals(reser_date)) { // 날짜가 같은 경우만 비교
                                if ((reserlist.get(j).getOk()).equals("1")) {
                                    try {
                                        if ((formatter.parse(formatter.format(cal.getTime()))).after(formatter.parse(reserlist.get(j).getReser_endtime())) || (formatter.parse(formatter.format(cal.getTime()))).equals(formatter.parse(reserlist.get(j).getReser_endtime()))) {
                                            count++;
                                            dao.UpdateReser(dto, Integer.toString(reserlist.get(j).getReser_number()), "-", "1");
                                        }

                                    } catch (ParseException ex) {
                                        java.util.logging.Logger.getLogger(ReserveAuth.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            }
                        }
                    }
                    for (int j = 0; j < accountlist.size(); j++) { // 전화번호를 얻기 위함
                        if (id.equals(accountlist.get(j).getId())) {
                            phonenumber = accountlist.get(j).getPhonenumber();
                        }
                    }
                    if (classnumber.equals("915")) {
                        send.send(phonenumber);
                        LectureRoom class915 = new Class915();
                        class915.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, reser_number, class915.display(), "1");
                        dao.UpdateReser(dto, reser_number, formatter.format(cal.getTime()));
                    }
                    if (classnumber.equals("916")) {
                        send.send(phonenumber);
                        LectureRoom class916 = new Class916();
                        class916.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, reser_number, class916.display(), "1");
                        dao.UpdateReser(dto, reser_number, formatter.format(cal.getTime()));
                    }
                    if (classnumber.equals("918")) {
                        send.send(phonenumber);
                        LectureRoom class918 = new Class918();
                        class918.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, reser_number, class918.display(), "1");
                        dao.UpdateReser(dto, reser_number, formatter.format(cal.getTime()));
                    }
                    if (classnumber.equals("911")) {
                        send.send(phonenumber);
                        LectureRoom class911 = new Class911();
                        class911.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, reser_number, class911.display(), "1");
                        dao.UpdateReser(dto, reser_number, formatter.format(cal.getTime()));
                    }

                    loadReserTable();
                    showMessageDialog(null, "※       연장성공※\n예약이 " + Integer.toString(str) + "분 연장됩니다.");

                    //classadmin 추가해야함
                } else if (isChecked == false) {
                    Calendar cal2 = Calendar.getInstance();
                    int str = 0;
                    try {
                        cal2.setTime(formatter.parse(reservationList.get(i).getReser_endtime()));
                        cal2.add(Calendar.MINUTE, time.time());
                        str = time.time();

                    } catch (ParseException ex) {
                        Logger.getLogger(ReservationMgmt.class.getName()).log(Level.SEVERE, null, ex);
                    }

                    ReservationDTO dto = new ReservationDTO();
                    dao.UpdateReser(dto, reser_number, formatter.format(cal2.getTime()));
                    loadReserTable();
                    showMessageDialog(null, "※       연장성공※\n예약이 " + Integer.toString(str) + "분 연장됩니다.");

                } else {
                    showMessageDialog(null, "       ※연장실패※\n다른 사용자와 예약 시간이 중복됩니다.");
                }
            }
        }

    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        int row = jTable2.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();
        model.addRow(new Object[]{
            String.valueOf(jTable2.getValueAt(row, 0))
        });

        if ("15분".equals(jTable2.getValueAt(row, 0))) {
            totalTime += 15;
        } else if ("30분".equals(jTable2.getValueAt(row, 0))) {
            totalTime += 30;
        } else if ("1시간".equals(jTable2.getValueAt(row, 0))) {
            totalTime += 60;
        }
        int hour = totalTime / 60;
        int min = totalTime % 60;
        String str = Integer.toString(hour) + "시간 " + Integer.toString(min) + "분";
        jLabel7.setText(str);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
        int row = jTable4.getSelectedRow();
        DefaultTableModel model = (DefaultTableModel) jTable4.getModel();

        if ("15분".equals(jTable4.getValueAt(row, 0))) {
            totalTime -= 15;
        } else if ("30분".equals(jTable4.getValueAt(row, 0))) {
            totalTime -= 30;
        } else if ("1시간".equals(jTable4.getValueAt(row, 0))) {
            totalTime -= 60;
        }
        int hour = totalTime / 60;
        int min = totalTime % 60;

        String str = Integer.toString(hour) + "시간 " + Integer.toString(min) + "분";
        jLabel7.setText(str);
        model.removeRow(row);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // TODO add your handling code here:
        jDialog2.dispose();
    }//GEN-LAST:event_jButton8ActionPerformed

    void loadReserTable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setNumRows(0);
        DAO dao = DAO.getInstance();
        List<ReservationDTO> reservationList = dao.getReserList();

        for (int i = 0; i < reservationList.size(); i++) {
            if (id.equals(reservationList.get(i).getId())) {
                model.addRow(new Object[]{
                    reservationList.get(i).getReser_number(), reservationList.get(i).getReser_date(), reservationList.get(i).getSeat_number(),
                    reservationList.get(i).getClassnumber(), reservationList.get(i).getReser_starttime(), reservationList.get(i).getReser_endtime()});
            }
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    // End of variables declaration//GEN-END:variables
}
