/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package deu.cse.team.reservation;

import deu.cse.team.message.SendMessage;
import deu.cse.team.tokenauth.*;
import deu.cse.team.singleton.AccountDTO;
import deu.cse.team.singleton.DAO;
import deu.cse.team.singleton.ReservationDTO;
import deu.cse.team.strategy.AllowedStudent;
import deu.cse.team.strategy.Class911;
import deu.cse.team.strategy.Class915;
import deu.cse.team.strategy.Class916;
import deu.cse.team.strategy.Class918;
import deu.cse.team.strategy.LectureRoom;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.table.DefaultTableModel;
import net.nurigo.java_sdk.api.Message;
import net.nurigo.java_sdk.exceptions.CoolsmsException;
import org.json.simple.JSONObject;

public class ReserveAuth extends javax.swing.JPanel {

    /**
     * Creates new form newReserveAuth
     */
    
    private String classnumber;
    
    public ReserveAuth() {
        initComponents();
        loadTable("911");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jButton3 = new javax.swing.JButton();

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "예약번호", "좌석번호", "학번", "예약 날짜", "시작시간", "끝시간", "관리권한", "승인 여부"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTable1);

        jLabel1.setFont(new java.awt.Font("맑은 고딕", 1, 18)); // NOI18N
        jLabel1.setText("예약 승인");

        jButton1.setText("승인 여부 변경");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "911", "915", "916", "918" }));

        jButton3.setText("조회");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(357, 357, 357))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addGap(373, 373, 373))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 742, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(39, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 34, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton3))
                        .addGap(12, 12, 12)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addGap(28, 28, 28))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        int row = jTable1.getSelectedRow();
        DAO dao = DAO.getInstance();
        ReservationDTO dto = new ReservationDTO();

        List<ReservationDTO> reserlist = dao.getReserList();
        List<AccountDTO> accountlist = dao.getAccountList();
        SendMessage send = new SendMessage();
        int maxReserNum = -1;

        SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");
        String max = "16:00"; // 최장시간을 구하기 위함
        String phonenumber = "01066885399";
        String admin = "-";
        int count = 0; //삭제 후 리스트에 값이 0개일 경우를 계산하기 위함
        boolean check = false; // 리스트에 값이 없는지 확인

        if ("O".equals(model.getValueAt(row, 7).toString())) { //예약 승인을 취소
            if ((model.getValueAt(row, 6).toString()).contains("관리권한")) { //취소하려는 예약이 관리권한자인 경우
                for (int i = 0; i < reserlist.size(); i++) {
                    if (((reserlist.get(i).getReser_number())) != (Integer.parseInt((model.getValueAt(row, 0).toString())))) { // 리스트에서 본인을 제외하고 비교
                        if (classnumber.equals(reserlist.get(i).getClassnumber())) { //같은 강의실인 사람만 비교
                            if ("1".equals(reserlist.get(i).getOk())) { //예약 승인된 사람만
                                if ((reserlist.get(i).getReser_date()).equals(model.getValueAt(row, 3).toString())) { //같은 날짜 예약인 사람만 비교
                                    if (Integer.parseInt((reserlist.get(i).getReser_starttime()).substring(0, 2)) >= 17) // 17시 이후 예약만 비교
                                    {
                                        count++;
                                        try {
                                            if ((formatter.parse(reserlist.get(i).getReser_endtime())).after(formatter.parse(max))) {
                                                max = reserlist.get(i).getReser_endtime();
                                                maxReserNum = reserlist.get(i).getReser_number();
                                                for (int j = 0; j < accountlist.size(); j++) { // 전화번호를 얻기 위함
                                                    if ((reserlist.get(i).getId()).equals(accountlist.get(j).getId())) {
                                                        phonenumber = accountlist.get(j).getPhonenumber();
                                                    }
                                                }
                                            }

                                        } catch (ParseException ex) {
                                            Logger.getLogger(ReserveAuth.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                if (count == 0) { // 선택한 값을 제외하고 예약 승인된 사람이 없을 경우
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), "-", "0");
                } else {
                    if (classnumber.equals("915")) {
                        LectureRoom class915 = new Class915();
                        class915.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, Integer.toString(maxReserNum), class915.display(), "1");
                        send.send(phonenumber);
                    }
                    if (classnumber.equals("916")) {
                        LectureRoom class916 = new Class916();
                        class916.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, Integer.toString(maxReserNum), class916.display(), "1");
                        send.send(phonenumber);
                    }
                    if (classnumber.equals("918")) {
                        LectureRoom class918 = new Class918();
                        class918.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, Integer.toString(maxReserNum), class918.display(), "1");
                        send.send(phonenumber);
                    }
                    if (classnumber.equals("911")) {
                        LectureRoom class911 = new Class911();
                        class911.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, Integer.toString(maxReserNum), class911.display(), "1");
                        send.send(phonenumber);
                    }
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), "-", "0");
                }
            } else {
                dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), "-", "0");
            }
            loadTable(classnumber);
            showMessageDialog(null, "예약 승인 해제");
        } else if ("X".equals(model.getValueAt(row, 7).toString())) { // 예약 승인을 허용
            for (int i = 0; i < reserlist.size(); i++) {
                if (classnumber.equals(reserlist.get(i).getClassnumber()) && (reserlist.get(i).getClassadmin()).equals(classnumber + "관리권한")) { //같은 강의실, 관리권한자인 경우만 비교
                    if ((reserlist.get(i).getReser_date()).equals(model.getValueAt(row, 3).toString())) { // 날짜가 같은 경우만 비교
                        if ((reserlist.get(i).getOk()).equals("1")) {
                            check = true;
                            try {
                                if ((formatter.parse(model.getValueAt(row, 5).toString())).after(formatter.parse(reserlist.get(i).getReser_endtime()))) {
                                    count++;
                                    dao.UpdateReser(dto, Integer.toString(reserlist.get(i).getReser_number()), "-", "1");
                                }

                            } catch (ParseException ex) {
                                Logger.getLogger(ReserveAuth.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    }
                }
            }
            if (check == false) {
                for (int j = 0; j < accountlist.size(); j++) { // 전화번호를 얻기 위함
                    if ((model.getValueAt(row, 2).toString()).equals(accountlist.get(j).getId())) {
                        phonenumber = accountlist.get(j).getPhonenumber();
                    }
                }
                if (classnumber.equals("915")) {
                    LectureRoom class915 = new Class915();
                    class915.setAllowedBehavior(new AllowedStudent());
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class915.display(), "1");
                    send.send(phonenumber);
                }
                if (classnumber.equals("916")) {
                    LectureRoom class916 = new Class916();
                    class916.setAllowedBehavior(new AllowedStudent());
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class916.display(), "1");
                    send.send(phonenumber);
                }
                if (classnumber.equals("918")) {
                    LectureRoom class918 = new Class918();
                    class918.setAllowedBehavior(new AllowedStudent());
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class918.display(), "1");
                    send.send(phonenumber);
                }
                if (classnumber.equals("911")) {
                    LectureRoom class911 = new Class911();
                    class911.setAllowedBehavior(new AllowedStudent());
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class911.display(), "1");
                    send.send(phonenumber);
                }
            } else {
                if (count == 0) {
                    dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), "-", "1");
                } else if (count >= 1) {
                    for (int j = 0; j < accountlist.size(); j++) { // 전화번호를 얻기 위함
                        if ((model.getValueAt(row, 2).toString()).equals(accountlist.get(j).getId())) {
                            phonenumber = accountlist.get(j).getPhonenumber();
                        }
                    }
                    if (classnumber.equals("915")) {
                        LectureRoom class915 = new Class915();
                        class915.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class915.display(), "1");
                        send.send(phonenumber);
                    }
                    if (classnumber.equals("916")) {
                        LectureRoom class916 = new Class916();
                        class916.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class916.display(), "1");
                        send.send(phonenumber);
                    }
                    if (classnumber.equals("918")) {
                        LectureRoom class918 = new Class918();
                        class918.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class918.display(), "1");
                        send.send(phonenumber);
                    }
                    if (classnumber.equals("911")) {
                        LectureRoom class911 = new Class911();
                        class911.setAllowedBehavior(new AllowedStudent());
                        dao.UpdateReser(dto, model.getValueAt(row, 0).toString(), class911.display(), "1");
                        send.send(phonenumber);
                    }
                }
            }
            loadTable(classnumber);
            showMessageDialog(null, "예약 승인");
        }
    }//GEN-LAST:event_jButton1ActionPerformed
     public void loadTable(String classNumber) {

        DAO dao = DAO.getInstance();
        List<ReservationDTO> reservationlist = dao.getReserList();
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        dtm.setRowCount(0);
        for (int i = 0; i < reservationlist.size(); i++) {
            if (classNumber.equals(reservationlist.get(i).getClassnumber())) {
                if ("1".equals(reservationlist.get(i).getOk())) {
                    dtm.addRow(new Object[]{reservationlist.get(i).getReser_number(), reservationlist.get(i).getSeat_number(), reservationlist.get(i).getId(),
                        reservationlist.get(i).getReser_date(), reservationlist.get(i).getReser_starttime(), reservationlist.get(i).getReser_endtime(),
                        reservationlist.get(i).getClassadmin(), "O"});
                } else {
                    dtm.addRow(new Object[]{reservationlist.get(i).getReser_number(), reservationlist.get(i).getSeat_number(), reservationlist.get(i).getId(),
                        reservationlist.get(i).getReser_date(), reservationlist.get(i).getReser_starttime(), reservationlist.get(i).getReser_endtime(),
                        reservationlist.get(i).getClassadmin(), "X"});
                }

            }

        }
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        classnumber = jComboBox1.getSelectedItem().toString();
        loadTable(classnumber);
    }//GEN-LAST:event_jButton3ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
